import { EffectValues, GearSet, Rating } from "./types";

const enchantUsage = {
  UnicornKnowledge: "",
  HPAdder: "",
  MPAdder: "",
  ATKAdder: "",
  MATKAdder: "",
  DEFAdder: "",
  MDEFAdder: "",
  SPDAdder: "",
  HPMultiplier: "",
  MPMultiplier: "",
  ATKMultiplier: "dps",
  MATKMultiplier: "",
  DEFMultiplier: "",
  MDEFMultiplier: "",
  ATKPropotion: "dps",
  MATKPropotion: "",
  DEFPropotion: "",
  MDEFPropotion: "",
  FireResistance: "",
  IceResistance: "",
  ThunderResistance: "",
  LightResistance: "",
  DarkResistance: "",
  PhysicalAbsorption: "",
  FireAbsorption: "",
  IceAbsorption: "",
  ThunderAbsorption: "",
  LightAbsorption: "",
  DarkAbsorption: "",
  DebuffResistance: "",
  EquipmentDropChance: "",
  SlimeDropChance: "",
  MagicSlimeDropChance: "",
  SpiderDropChance: "",
  BatDropChance: "",
  FairyDropChance: "",
  FoxDropChance: "",
  DevilFishDropChance: "",
  TreantDropChance: "",
  FlameTigerDropChance: "",
  UnicornDropChance: "",
  ColorMaterialDropChance: "",
  PhysicalCritical: "dps",
  MagicalCritical: "",
  EXPGain: "gains",
  SkillProficiency: "gains",
  EquipmentProficiency: "gains",
  MoveSpeedMultiplier: "",
  GoldGain: "",
  StoneGain: "",
  CrystalGain: "",
  LeafGain: "",
  WarriorSkillLevel: "",
  WizardSkillLevel: "",
  AngelSkillLevel: "",
  ThiefSkillLevel: "",
  ArcherSkillLevel: "",
  TamerSkillLevel: "",
  AllSkillLevel: "",
  SlimeKnowledge: "",
  MagicSlimeKnowledge: "",
  SpiderKnowledge: "",
  BatKnowledge: "",
  FairyKnowledge: "",
  FoxKnowledge: "",
  DevilFishKnowledge: "",
  TreantKnowledge: "",
  FlameTigerKnowledge: "",
  PhysicalDamage: "",
  FireDamage: "",
  IceDamage: "dps",
  ThunderDamage: "",
  LightDamage: "",
  DarkDamage: "",
  HpRegen: "",
  MpRegen: "",
  TamingPoint: "",
  WarriorSkillRange: "",
  WizardSkillRange: "",
  AngelSkillRange: "",
  ThiefSkillRange: "",
  ArcherSkillRange: "",
  TamerSkillRange: "",
  TownMatGain: "gains",
  TownMatAreaClearGain: "",
  RebirthPointGain1: "gains",
  RebirthPointGain2: "gains",
  RebirthPointGain3: "gains",
  CriticalDamage: "dps",
  BlessingEffect: "dps",
  MoveSpeedAdder: "",
  PetEXPGain: "",
  LoyaltyPointGain: "",
  CatalystDoubleCriticalChance: "",
  WarriorSkillEffectRange: "",
  WizardSkillEffectRange: "",
  AngelSkillEffectRange: "",
  ThiefSkillEffectRange: "",
  ArcherSkillEffectRange: "",
  TamerSkillEffectRange: "",
  HpRegenMultiplier: "",
  MpRegenMultiplier: "",
  ArmoredFury: "",
  WardedFury: "dps",
  PetPhysicalCriticalChance: "",
  PetMagicalCriticalChance: "",
  PetCriticalDamage: "",
  PetDebuffResistance: "",
  StoneTownResearchPower: "",
  CrystalTownResearchPower: "",
  LeafTownResearchPower: "",
  GuildEXPGain: "gains",
  SPDMultiplier: "",
  CriticalDamageMultiplier: "dps",
  SkillProficiencyMultiplier: "gains",
  EquipmentProficiencyMultiplier: "gains",
  EXPGainMultiplier: "gains",
  GoldGainMultiplier: "",
  PhysicalDamageMultiplier: "",
  FireDamageMultiplier: "",
  IceDamageMultiplier: "dps",
  ThunderDamageMultiplier: "",
  LightDamageMultiplier: "",
  DarkDamageMultiplier: "",
  TamingPointMultiplier: "",
  PetEXPGainMultiplier: "",
  LoyaltyPointGainMultiplier: "",
  BlessingEffectMultiplier: "dps",
  PhysicalCriticalMultiplier: "dps",
  MagicalCriticalMultiplier: "",
};

export const rateEffects = (gearSet:GearSet, ese: EffectValues, rating: Rating) => {
  rating.dps = 1;
  rating.gains = 1;

  //TODO improve the accuracy
  // "Nothing" is a enchant slot, its worth as much as the best enchant
  // consider outlier like fury
  //consider target caps for dps and crit chance
  for (let effectKind in ese) {
    //if we dont care for these dont include them in the value
    if (!enchantUsage[effectKind]) {
      continue;
    }

    let effectValue = ese[effectKind];

    rating.dps *= 1 + effectValue;
  }

  rating.total = rating.dps * rating.gains;
};
